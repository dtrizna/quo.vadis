import os
import magic
import numpy as np
from secml.array import CArray

from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi
from secml_malware.attack.blackbox.ga.c_base_genetic_engine import CGeneticAlgorithm
from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware
from secml_malware.attack.blackbox.c_gamma_sections_evasion import CGammaSectionsEvasionProblem

from secml_malware.models.malconv import MalConv

net = CClassifierEnd2EndMalware(MalConv())
net.load_pretrained_model()
net = CEnd2EndWrapperPhi(net)


samples_goodware = "../samples_goodware/"
samples_testset = "../samples_testset/"
samples_adversarial = "../samples_adversarial_testset/"
os.makedirs(samples_adversarial, exist_ok=True)

section_population, what_from_who = CGammaSectionsEvasionProblem.create_section_population_from_folder(samples_goodware, how_many=15, sections_to_extract=['.rdata', '.data'])

attack = CGammaSectionsEvasionProblem(section_population, net, population_size=10, penalty_regularizer=1e-6, iterations=15, threshold=0)

X = []
y = []
file_names = []

for i, f in enumerate(os.listdir(samples_testset)):
    link = os.path.join(samples_testset, f)
    path = magic.from_file(link).replace("symbolic link to `", "").strip("'")
    if "PE32" not in magic.from_file(path):
        print(f" [-] Not PE32: {path}")
        continue
    with open(path, "rb") as fhandle:
        code = fhandle.read()
    
    x = CArray(np.frombuffer(code, dtype=np.uint8)).atleast_2d()
    _, confidence = net.predict(x, True)
    y = confidence[1][0].item()

    filename = samples_adversarial + f
    if not os.path.exists(filename):
        if y < 0.5:
            # already evasive, probably benign sample from testset    
            print(f"\n> Benign: writing link: {filename}")
            os.system(f"ln -s {path} {filename}")
        else:
            print(f"\n> Malicious:\n\t{path} with confidence {y:.4f}")
            print(f"> Initiating attack...")
            engine = CGeneticAlgorithm(attack)
            y_pred, adv_score, adv_ds, f_obj = engine.run(x, CArray(y))
            if f_obj > 0.5:
                print(f"> not evasive after attack: {filename}, score: {f_obj}")
            engine.write_adv_to_file(adv_ds.X, filename)