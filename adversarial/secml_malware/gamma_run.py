import os
import sys
import magic
import numpy as np
from secml.array import CArray

from secml_malware.attack.blackbox.c_wrapper_phi import CEnd2EndWrapperPhi, CEmberWrapperPhi
from secml_malware.attack.blackbox.ga.c_base_genetic_engine import CGeneticAlgorithm
from secml_malware.models.c_classifier_end2end_malware import CClassifierEnd2EndMalware
from secml_malware.models.c_classifier_ember import CClassifierEmber
from secml_malware.attack.blackbox.c_gamma_sections_evasion import CGammaSectionsEvasionProblem

from secml_malware.models.malconv import MalConv

import threading
import time

def gamma_run(net, samples_adversarial, samples_testset, filehash, i=0, l=0):
    filename = samples_adversarial + filehash
    print(f" {i}/{l}")

    if not os.path.exists(filename):

        link = os.path.join(samples_testset, filehash)
        path = magic.from_file(link).replace("symbolic link to `", "").strip("'")
        
        mmagic = magic.from_file(path)
        if "PE32" not in mmagic:
            print(f" [-] Writing link, Not PE32: {path} - {mmagic}")
            os.system(f"ln -s {path} {filename}")
        
        else:
            # Based on: https://github.com/pralab/secml_malware/blob/af252998f383a9f2cac7d4e0fc1156320f133460/blackbox_tutorial.ipynb
            
            # First run config, results in adversarial/samples_adversarial_testset_gamma_ember 
            #section_population, what_from_who = CGammaSectionsEvasionProblem.create_section_population_from_folder(samples_goodware, how_many=15, sections_to_extract=['.rdata', '.data'])
            #attack = CGammaSectionsEvasionProblem(section_population, net, population_size=10, penalty_regularizer=1e-6, iterations=15, threshold=0)

            # Second run config, results in             
            section_population, what_from_who = CGammaSectionsEvasionProblem.create_section_population_from_folder(samples_goodware, how_many=10, sections_to_extract=['.rdata', '.data'])
            attack = CGammaSectionsEvasionProblem(section_population, net, population_size=10, penalty_regularizer=1e-6, iterations=15, threshold=0)
            
            with open(path, "rb") as fhandle:
                code = fhandle.read()
            
            x = CArray(np.frombuffer(code, dtype=np.uint8)).atleast_2d()
            _, confidence = net.predict(x, True)
            y = confidence[1][0].item()

            if y < 0.5:
                # already evasive, probably benign sample from testset    
                print(f"\n [!] Benign: writing link: {filename}")
                os.system(f"ln -s {path} {filename}")
            else:
                print(f"\n[!] Malicious:\n\t{path} with confidence {y:.4f}")
                print(f" [*] Initiating attack...")
                engine = CGeneticAlgorithm(attack)
                try:
                    y_pred, adv_score, adv_ds, f_obj = engine.run(x, CArray(y))
                except AttributeError as ex:
                    print(f" [-] Attack against {filename} failed with AttributeError: {ex}, writing link")
                    os.system(f"ln -s {path} {filename}")
                    return
                if f_obj > 0.5:
                    print(f" [-] Not evasive after attack: {filename}, score: {f_obj}")
                else:
                    print(f" [+] Evasive after attac: {filename}, score: {f_obj}")
                engine.write_adv_to_file(adv_ds.X, filename)

if __name__ == "__main__":

    # net = CClassifierEnd2EndMalware(MalConv())
    # net.load_pretrained_model()
    # net = CEnd2EndWrapperPhi(net)
    # samples_adversarial = "../samples_adversarial_testset_gamma_malconv/"

    net = CClassifierEmber(tree_path="../../modules/sota/ember/parameters/ember_model.txt")
    net = CEmberWrapperPhi(net)
    samples_adversarial = "../samples_adversarial_testset_gamma_ember_2ndrun/"

    os.makedirs(samples_adversarial, exist_ok=True)

    samples_goodware = "../samples_goodware/"
    samples_testset = "../samples_testset/"

    if len(sys.argv) == 1:
        THREADS = 10
        INDEX = 0
    elif len(sys.argv) == 2:
        THREADS = int(sys.argv[1])
        INDEX = 0
    elif len(sys.argv) == 3:
        THREADS = int(sys.argv[1])
        INDEX = int(sys.argv[2])
    else:
        sys.exit()

    testset_samples = os.listdir(samples_testset)
    l = len(testset_samples)
    for i, filehash in enumerate(testset_samples[INDEX:]):
        i = i + INDEX
        thread = threading.Thread(target=gamma_run, args=(net, samples_adversarial, samples_testset, filehash, i, l))
        thread.start()
        
        while len(threading.enumerate()) > THREADS:
            time.sleep(0.1)
        